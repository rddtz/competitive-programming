#+STARTUP: content
#+STARTUP: overview
#+STARTUP: indent
#+TITLE: My notes about competitive programming

* Algorithms
Here are some algorithms that may be important
with some uses cases and explanations.
** Graph Algorithms
*** DFS and BFS

The DFS (depth first search) is an algorithm for traversing or searching a graph.
It visits all nodes connecteds to the root/starting node in the graph, exploring
as far as possible each branch before going to the othres.

Example of a graph with 8 vertex as an 8x8 matrix:
#+name: example_graph
|0|1|1|0|0|0|0|0|
|0|0|0|1|1|0|0|0|
|0|0|0|0|1|1|0|1|
|0|0|0|0|0|0|0|0|
|0|0|0|0|1|0|0|0|
|0|1|0|0|0|0|0|0|
|0|0|0|0|0|0|1|0|

#+name: DFS example for matrices
#+header: :includes <bits/stdc++.h>  :results output :eval yes :var graph=example_graph
#+begin_src C++ 

#define MAX 8
using namespace std;

void dfs(int graph[MAX][MAX], int visitados[MAX], int v){

  visitados[v] = 1;
  cout << v << " ";

  for(int i = 0; i < MAX; i++){
    if(!visitados[i] && graph[v][i]){
      dfs(graph, visitados, i);
    }
  }    
}

int main(){

  int visitados[MAX] = {0};

  cout << "DFS with 0 as root node: ";
  dfs(graph, visitados, 0);
        
  return 0;
}

#+end_src

#+RESULTS: BFS example for matrices
: DFS with 0 as root node: 0 1 3 4 2 5 7 

#+name: DFS example for matrices
#+header: :includes <bits/stdc++.h>  :results output :eval yes :var graph=example_graph
#+begin_src C++ 

#define MAX 8
using namespace std;

void bfs(int graph[MAX][MAX], int v){

  queue<int> fila;
  fila.push(v);

  int visitados[MAX] = {0};
  visitados[v] = 1;

  int atual = 0;

  while(!fila.empty()){

    atual = fila.front();
    fila.pop();

    cout << atual << " ";

    for(int i = 0; i < MAX; i++){
      if(!visitados[i] && graph[atual][i]){
	       fila.push(i);
	       visitados[i] = 1;
      }
    }
  }
}


int main(){

  cout << "BFS with 0 as root node: ";
  bfs(graph, 0);
        
  return 0;
}

#+end_src

#+RESULTS: DFS example for matrices
: BFS with 0 as root node: 0 1 2 3 4 5 7 

** Matrices Algorithms
*** Flood Fill
Flood fill is a recursive algorithm used to fill a array
or search for rooms in a matrix. The idea of the algorithm is
find the one object and reproduce it in all the free space that
aren't filled with it yet.

Here is an example of the use of flood fill for resolving
the [[https://cses.fi/problemset/task/1192][counting room problem]] from the CSES site.

#+begin_src C++ :includes <bits/stdc++.h> :results output :exports both
#define MAX 1001

using namespace std;

void flood_fill(char graph[MAX][MAX], int l, int c){

  graph[l][c] = '#';
  
  if(graph[l][c+1] == '.'){
    flood_fill(graph, l, c+1);
  }
  if(graph[l+1][c] == '.'){
    flood_fill(graph, l+1, c);
  }
  if(graph[l-1][c] == '.'){
    flood_fill(graph, l-1, c);
  }
  if(graph[l][c-1] == '.'){
    flood_fill(graph, l, c-1);
  }
 
}

int main(){

  ios::sync_with_stdio(false);  

  int l, c;
  int salas = 0;

  char graph[MAX][MAX];
  
  cin >> l >> c;
  
  for(int i = 0; i < l; i++){
    for(int j = 0; j < c; j++){
      cin >> graph[i][j];
    }
  }

  for(int i = 0; i < l; i++){
    for(int j = 0; j < c; j++){
      if(graph[i][j] == '.'){
	      salas++;
	      flood_fill(graph, i, j);
      }
    }
  }

  cout << salas << '\n';
  
  return 0;
}
#+end_src

* C++ Tips
** Fast I/O
There are some techniques that can be used to make the input/output functions
faster. Here we have some of then:
*** Disabling the C and C++ synchronization

#+name: Command to desable the C and C++ I/O synchronization
#+begin_src C++ :includes '(<bits/stdc++.h> <chrono>)   :eval no
  ios::sync_with_stdio(false);
#+end_src

You can desable the synchronizaiton between the output and input methods of the
C and C++ languages, this way they will work independently and the cin and cout
methods will be fasters.

#+name: Example 1 - Comparation between synchronous and unsynchronous I/O
#+begin_src C++ :includes '(<bits/stdc++.h> <chrono>)  :results output :eval yes

using namespace std;
using namespace std::chrono;

auto start_s = high_resolution_clock::now();

for(int i = 0; i < 2000; i++){
  if(i % 2){
    cout << " ";
  }
 }

auto end_s = high_resolution_clock::now();

ios::sync_with_stdio(false);

auto start_ns = high_resolution_clock::now();

for(int i = 0; i < 2000; i++){
  if(i % 2){
    cout << " ";
  }
 }

auto end_ns = high_resolution_clock::now();

auto duration_sync = duration_cast<microseconds>(end_s - start_s);
auto duration_nsync = duration_cast<microseconds>(end_ns - start_ns);

cout << "\nRuntime with Synchronization: " << duration_sync.count() << " ms \n";
cout << "Runtime without Synchronization: " << duration_nsync.count() << " ms \n";

#+end_src

#+RESULTS: Example 1 - Comparation between synchronous and unsynchronous I/O

: Runtime with Synchronization: 43 ms 
: Runtime without Synchronization: 23 ms 

It is important to note that if the I/O synchronization are disabled, using the C methods can couse some
confusion:

#+name: Example 2 - Problem using C and C++ output methods unsynchronizeds
#+begin_src C++ :includes '(<bits/stdc++.h> <chrono>)   :results output :eval yes

  using namespace std;
  using namespace std::chrono;

  ios::sync_with_stdio(false);

  auto start = high_resolution_clock::now();

  cout << "a\n";
  printf("b\n");
  cout << "c\n";

  auto end = high_resolution_clock::now();
 
  auto duration = duration_cast<microseconds>(end - start);

  cout << "Runtime: " << duration.count() << " ms \n";

#+end_src

#+RESULTS: Example 3 - Problem using C and C++ output methods unsynchronizeds
: a
: c
: Runtime: 13 ms 
: b

*** Unting CIN and COUT

You can untie the CIN and COUT commands with the above command:
#+name: Command to desable the C and C++ I/O synchronization
#+begin_src C++ :includes '(<bits/stdc++.h> <chrono>)   :results output :eval no
  cin.tie(nullptr);
#+end_src

Doing this, the CIN don't will wait fot the COUT to appears in the screen
in order to ask for an input and vice-versa. It can be used when you need to altern
from CIN and COUT in your program.

* Mathematics

